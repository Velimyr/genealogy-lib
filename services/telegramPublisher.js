const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
const FormData = require('form-data');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;

// –Ü—Å–Ω—É—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏
async function publishMaterialCard(session) {
    const lines = [
        'üìö *–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª:*',
        `‚Ä¢ –ù–∞–∑–≤–∞ (–æ—Ä–∏–≥—ñ–Ω–∞–ª): *${session.originalTitle}*`,
        `‚Ä¢ –ù–∞–∑–≤–∞ (—É–∫—Ä.): *${session.ukrTitle}*`,
        `‚Ä¢ –ê–≤—Ç–æ—Ä: *${session.author}*`,
        `‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: *${session.category}*`,
        `‚Ä¢ –ö–æ—Ä–∏—Å–Ω—ñ—Å—Ç—å: *${session.usefulness}*`,
    ];

    if (session.link) {
        lines.push(`‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è: [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É](${session.link})`);
    } else if (session.fileAttachment?.name) {
        lines.push(`‚Ä¢ –§–∞–π–ª: *${session.fileAttachment.name}*`);
    }

    const text = lines.join('\n');

    const payload = {
        chat_id: TELEGRAM_CHANNEL_ID,
        text,
        parse_mode: 'Markdown'
    };

    const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    });

    const data = await res.json();
    if (!data.ok) {
        throw new Error(`Telegram error: ${JSON.stringify(data)}`);
    }

    return {
        messageId: data.result.message_id,
        chatId: data.result.chat.id
    };
}

// –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É –≤ –∫–∞–Ω–∞–ª Telegram
async function publishFileToTelegramChannel(fileAttachment, caption = '') {
    if (!fileAttachment || !fileAttachment.contentUrl) {
        throw new Error("fileAttachment or fileAttachment.contentUrl is undefined");
    }
    const response = await fetch(fileAttachment.contentUrl);
    if (!response.ok) {
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ ${fileAttachment.contentUrl}`);
    }
    const fileBuffer = await response.buffer();

    // –§–æ—Ä–º—É—î–º–æ multipart/form-data
    const form = new FormData();
    form.append('chat_id', TELEGRAM_CHANNEL_ID);
    form.append('document', fileBuffer, {
        filename: fileAttachment.name,
        contentType: fileAttachment.contentType
    });
    if (caption) {
        form.append('caption', caption);
        form.append('parse_mode', 'Markdown');
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, {
        method: 'POST',
        body: form,
        headers: form.getHeaders()
    });

    const data = await res.json();
    if (!data.ok) {
        throw new Error(`Telegram error: ${JSON.stringify(data)}`);
    }

    const fileId = data.result.document?.file_id;
    let telegramFileLink = null;

    if (fileId) {
        const fileRes = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`);
        const fileData = await fileRes.json();

        if (fileData.ok) {
            const filePath = fileData.result.file_path;
            telegramFileLink = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
        }
    }

    // –ü—Ä–∏—Å–≤–æ—é—î–º–æ telegramFileLink —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å fileAttachment, —è–∫—â–æ —Ç–∞–∫–µ —ñ—Å–Ω—É—î
    if (fileAttachment) {
        fileAttachment.telegramFileLink = telegramFileLink;
    }

    return {
        messageId: data.result.message_id,
        chatId: data.result.chat.id,
        fileId: data.result.document.file_id,
        fileName: data.result.document.file_name,
        mimeType: data.result.document.mime_type,
        telegramFileLink: telegramFileLink
    };
}

module.exports = {
    publishMaterialCard,
    publishFileToTelegramChannel
};