const { store, resetSession, getSession } = require('../services/sessionStore');
const validUrl = require('valid-url');
const { publishMaterialCard, publishFileToTelegramChannel } = require('../services/telegramPublisher');
const { saveMaterial } = require('../services/db');
const handleMenu = require('./dialogManager');

async function startWizard(context) {
    const userId = [context.activity.from.id];
    resetSession(userId);
    store[userId].step = 1;

    await context.sendActivity({
        text: 'üìò –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ (–º–æ–≤–æ—é –æ—Ä–∏–≥—ñ–Ω–∞–ª—É):',
        suggestedActions: {
            actions: [
                { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
            ],
            to: [context.activity.from.id]
        }
    });
}

// –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç node-fetch
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ —Ñ–∞–π–ª—É –∑ contentUrl
async function getFileBuffer(contentUrl) {
    console.log('[DEBUG] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL:', contentUrl);
    const response = await fetch(contentUrl);
    if (!response.ok) {
        console.error('[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª. –ö–æ–¥:', response.status, response.statusText);
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª');
    }
    const arrayBuffer = await response.arrayBuffer();
    console.log('[DEBUG] –†–æ–∑–º—ñ—Ä –±—É—Ñ–µ—Ä–∞ (–±–∞–π—Ç):', arrayBuffer.byteLength);
    return Buffer.from(arrayBuffer);
}

async function handleWizardStep(context) {
    const userId = context.activity.from.id;
    const session = getSession(userId);
    const text = context.activity.text?.trim();
    const lowerText = text?.toLowerCase();

    if (!session || session.step === 0) return false;

    if (lowerText === '–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏') {
        resetSession(userId);
        await context.sendActivity('‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
        return true;
    }

    switch (session.step) {
        case 1:
            session.originalTitle = text;
            session.step = 2;
            await context.sendActivity({
                text: 'üá∫üá¶ –í–≤–µ–¥—ñ—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ:',
                suggestedActions: {
                    actions: [
                        { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                        { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                    ],
                    to: [context.activity.from.id]
                }
            });
            return true;
        case 2:
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 1;
                await context.sendActivity({
                    text: 'üìò –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ (–º–æ–≤–æ—é –æ—Ä–∏–≥—ñ–Ω–∞–ª—É):',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            session.ukrTitle = text;
            session.step = 3;
            await context.sendActivity({
                text: 'üßë‚Äçüíº –í–≤–µ–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ:',
                suggestedActions: {
                    actions: [
                        { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                        { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                    ],
                    to: [context.activity.from.id]
                }
            });
            return true;
        case 3:
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 2;
                await context.sendActivity({
                    text: 'üá∫üá¶ –í–≤–µ–¥—ñ—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ:',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            session.author = text;
            session.step = 4;
            const categories = require('../data/categories.json');
            const buttons = categories.map(cat => ({
                type: 'imBack',
                title: cat,
                value: cat
            }));
            await context.sendActivity({
                text: 'üóÇÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ:',
                suggestedActions: {
                    actions: buttons,
                    to: [context.activity.from.id]
                }
            });
            return true;
        case 4:
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 3;
                await context.sendActivity({
                    text: 'üßë‚Äçüíº –í–≤–µ–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ:',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            const cats = require('../data/categories.json');
            if (!cats.includes(text)) {
                await context.sendActivity('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫.');
                return true;
            }
            session.category = text;
            session.step = 5;
            await context.sendActivity({
                text: 'üß≠ –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–∏—Å–Ω—ñ—Å—Ç—å –¥–ª—è –¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∞:',
                suggestedActions: {
                    actions: [
                        { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                        { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                    ],
                    to: [context.activity.from.id]
                }
            });
            return true;
        case 5:
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 4;
                const cats = require('../data/categories.json');
                const buttons = cats.map(cat => ({
                    type: 'imBack',
                    title: cat,
                    value: cat
                }));
                await context.sendActivity({
                    text: 'üóÇÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–Ω–∏–≥–∏/—Å—Ç–∞—Ç—Ç—ñ:',
                    suggestedActions: {
                        actions: buttons,
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            session.usefulness = text;
            session.step = 6;
            await context.sendActivity({
                text: 'üîó –ë–∞–∂–∞—î—Ç–µ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª?',
                suggestedActions: {
                    actions: [
                        { type: 'imBack', title: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è', value: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è' },
                        { type: 'imBack', title: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª', value: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª' },
                        { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                        { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                    ],
                    to: [context.activity.from.id]
                }
            });
            return true;
        case 6:
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 5;
                await context.sendActivity({
                    text: 'üß≠ –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–∏—Å–Ω—ñ—Å—Ç—å –¥–ª—è –¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∞:',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            if (lowerText === '–ø–æ—Å–∏–ª–∞–Ω–Ω—è') {
                session.step = 7;
                await context.sendActivity({
                    text: 'üîó –í–≤–µ–¥—ñ—Ç—å URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª:',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            if (lowerText === '–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª') {
                session.step = 8;
                await context.sendActivity({
                    text: 'üìé –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è):',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            await context.sendActivity('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å "–ü–æ—Å–∏–ª–∞–Ω–Ω—è" –∞–±–æ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª".');
            return true;
        case 7:
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 6;
                await context.sendActivity({
                    text: 'üîó –ë–∞–∂–∞—î—Ç–µ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª?',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è', value: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è' },
                            { type: 'imBack', title: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª', value: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª' },
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            if (!validUrl.isUri(text)) {
                await context.sendActivity('‚ùó –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
                return true;
            }
            session.link = text;
            session.step = 9;
            return await handleWizardStep(context);
        case 8:
            console.log('[DEBUG] activity at step 8:', JSON.stringify(context.activity, null, 2));
            if (context.activity.attachments && context.activity.attachments.length > 0) {
                const attachment = context.activity.attachments[0];
                console.log('[DEBUG] contentUrl –≤–∫–ª–∞–¥–µ–Ω–Ω—è:', attachment.contentUrl);
                session.fileAttachment = {
                    name: attachment.name,
                    contentType: attachment.contentType,
                    contentUrl: attachment.contentUrl
                };
                session.step = 9;
                await context.sendActivity({
                    text: 'üìÑ –§–∞–π–ª –ø—Ä–∏–π–Ω—è—Ç–æ. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ...',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', value: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' },
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                session.step = 6;
                await context.sendActivity({
                    text: 'üîó –ë–∞–∂–∞—î—Ç–µ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª?',
                    suggestedActions: {
                        actions: [
                            { type: 'imBack', title: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è', value: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è' },
                            { type: 'imBack', title: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª', value: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª' },
                            { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                            { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                        ],
                        to: [context.activity.from.id]
                    }
                });
                return true;
            }
            await context.sendActivity('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª.');
            return true;
        case 9:
            let confirmText = `üìö –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª\n`;
            confirmText += `‚Ä¢ –ù–∞–∑–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª - ${session.originalTitle}\n`;
            confirmText += `‚Ä¢ –ù–∞–∑–≤–∞ —É–∫—Ä.-  ${session.ukrTitle}\n`;
            confirmText += `‚Ä¢ –ê–≤—Ç–æ—Ä - ${session.author}\n`;
            confirmText += `‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è - ${session.category}\n`;
            confirmText += `‚Ä¢ –ö–æ—Ä–∏—Å–Ω—ñ—Å—Ç—å - ${session.usefulness}\n`;
            if (session.link) {
                confirmText += `‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è - ${session.link}\n`;
            }
            if (session.fileAttachment) {
                confirmText += `‚Ä¢ –§–∞–π–ª - ${session.fileAttachment.name || '–î–æ–∫—É–º–µ–Ω—Ç'}\n`;
            }
            if (lowerText === '–Ω–∞–∑–∞–¥') {
                if (session.link) {
                    session.step = 7;
                    await context.sendActivity({
                        text: 'üîó –í–≤–µ–¥—ñ—Ç—å URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª:',
                        suggestedActions: {
                            actions: [
                                { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                                { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                            ],
                            to: [context.activity.from.id]
                        }
                    });
                    return true;
                } else if (session.fileAttachment) {
                    session.step = 8;
                    await context.sendActivity({
                        text: 'üìé –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è):',
                        suggestedActions: {
                            actions: [
                                { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                                { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                            ],
                            to: [context.activity.from.id]
                        }
                    });
                    return true;
                }
            }
            if (lowerText === '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' || lowerText === '–¥–∞–ª—ñ') {
                try {
                    let materialData = {
                        originalTitle: session.originalTitle,
                        ukrTitle: session.ukrTitle,
                        author: session.author,
                        category: session.category,
                        usefulness: session.usefulness,
                        link: session.link || null,
                        fileAttachment: session.fileAttachment || null,
                        created_by: userId,
                        created_at: new Date().toISOString()
                    };

                    if (session.fileAttachment) {
                        console.log('[DEBUG] –ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ñ–∞–π–ª—É –≤ Telegram');
                        console.log('[DEBUG] –Ü–º º—è —Ñ–∞–π–ª—É:', session.fileAttachment.name);
                        console.log('[DEBUG] URL –∫–æ–Ω—Ç–µ–Ω—Ç—É:', session.fileAttachment.contentUrl);
                        try {
                            const fileBuffer = await getFileBuffer(session.fileAttachment.contentUrl);
                            const tgFileInfo = await publishFileToTelegramChannel(fileBuffer, session.fileAttachment, confirmText);
                            materialData.fileAttachment = {
                                telegramFileLink: tgFileInfo?.telegramFileLink || null,
                                name: session.fileAttachment.name || null
                            };
                        } catch (err) {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É —É Telegram-–∫–∞–Ω–∞–ª:', err);
                            await context.sendActivity('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ñ–∞–π–ª —É –∫–∞–Ω–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –º–∞—Ç–µ—Ä—ñ–∞–ª –±–µ–∑ —Ñ–∞–π–ª—É.');
                            return true;
                        }
                    }
                    else if (session.link) {
                        await publishMaterialCard(materialData);
                    }
                    await saveMaterial(materialData);
                    resetSession(userId);
                    await context.sendActivity('‚úÖ –ö–Ω–∏–≥–∞/—Å—Ç–∞—Ç—Ç—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!');
                    await handleMenu(context);
                } catch (err) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—É:', err);
                    await context.sendActivity('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                    await handleMenu(context);
                }
                return true;
            }
            await context.sendActivity({
                text: confirmText,
                textFormat: 'xml',
                suggestedActions: {
                    actions: [
                        { type: 'imBack', title: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', value: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' },
                        { type: 'imBack', title: '–ù–∞–∑–∞–¥', value: '–ù–∞–∑–∞–¥' },
                        { type: 'imBack', title: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', value: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏' }
                    ],
                    to: [context.activity.from.id]
                }
            });
            return true;
        default:
            return false;
    }
}

module.exports = {
    startWizard,
    handleWizardStep
};